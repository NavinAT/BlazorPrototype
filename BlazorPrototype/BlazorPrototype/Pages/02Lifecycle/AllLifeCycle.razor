@page "/lifecycle"
@inject IJSRuntime IJSruntime

@DynamicRenderFragment

@code {
    private RenderFragment DynamicRenderFragment { get; set; }

    protected override void OnInitialized()
    {
        DynamicRenderFragment = renderBuilder =>
        {
            renderBuilder.OpenElement(0, "div");
            renderBuilder.AddAttribute(1, "class", "div-container");
            renderBuilder.AddMarkupContent(2, "<h3>Header Created Dynamically in OnInitialized()</h3>");
            renderBuilder.AddMarkupContent(3,"<hr/>");
            renderBuilder.OpenElement(4, "p");
            renderBuilder.AddAttribute(5, "style", "color: chartreuse; font-weight: bolder");
            renderBuilder.AddContent(6, "Paragraph created using render tree builder");
            renderBuilder.CloseElement();
            renderBuilder.OpenElement(7, "h4");
            renderBuilder.AddAttribute(8, "id", "myheader");
            renderBuilder.AddContent(9, "Mouseover the header to change the color of the content (Script injected in OnAfterRender())");
            renderBuilder.CloseElement();
            renderBuilder.CloseElement();
        };
    }

    protected override void OnParametersSet()
    {
        //will be called while setting or updating parameter from other component / called automatically after OnIntialized().  
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            IJSruntime.InvokeVoidAsync("ChangeElementColor");
        }
    }

}